http://162.55.220.72:5005/first
1. Отправить запрос.  +
2. Статус код 200 +
3. Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!ss");
});

===================================

http://162.55.220.72:5005/user_info_3
1. Отправить запрос. +
2. Статус код 200 +
3. Спарсить response body в json.
let resp_f = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check correct name", function () {
    pm.expect(req_name).to.eql("sasha");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check correct age", function () {
    pm.expect(req_age).to.eql("19");
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check correct salary", function () {
    pm.expect(req_salary).to.eql("2000");
});

7. Спарсить request.
let req_f = request.data

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check correct name_req", function () {
    pm.expect(resp_name).to.eql(req_name);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check correct age_req", function () {
    pm.expect(req_age).to.eql(resp_age);
}); 

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Chech correct salary_req", function () {
    pm.expect(+req_salary).to.eql(resp_salary);
}); 

11. Вывести в консоль параметр family из response.
console.log(resp_f.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("salary after 1_5 years", function () {
    pm.expect(req_salary*4).to.eql(resp_salary_1_5_years);
});

 ========================================

http://162.55.220.72:5005/object_info_3
1. Отправить запрос. +
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let resp_f = pm.response.json();

4. Спарсить request.
let req_f = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Your test name", function () {
    pm.expect(req_name).to.eql(resp_name);
}); 

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Your test age", function () {
    pm.expect(req_age).to.eql(resp_age);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Your test salary", function () {
    pm.expect(req_salary).to.eql(resp_salary);
});

8. Вывести в консоль параметр family из response.
console.log(resp_f.family)

9. Проверить, что у параметра dog есть параметры name.
pm.test("Dog's name", function () {
    pm.expect(resp_dog).to.have.property("name");
});

10. Проверить, что у параметра dog есть параметры age.
pm.test("Dog's age", function () {
    pm.expect(resp_dog).to.have.property("age");
});

11. Проверить, что параметр name имеет значение Luky.
pm.test("Dog's name is Luky", function () {
    pm.expect(resp_dog_name).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.
pm.test("Dog's age is 4", function () {
    pm.expect(resp_dog.age).to.eql(4);
});

=========================================

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let resp_f = pm.response.json();

4. Спарсить request.
let req_f = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Your test name", function () {
    pm.expect(req_name).to.eql(resp_name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Your test age", function () {
    pm.expect(req_age).to.eql(resp_age);
});

7. Вывести в консоль параметр salary из request.
console.log (req_salary)

8. Вывести в консоль параметр salary из response.
console.log(resp_salary)

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log("response salary 0: resp_salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log("response salary 1: ", resp_salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log("response salary 2: ", resp_salary[2]) 

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("request salary 0", function () {
    pm.expect(req_salary).to.eql(resp_salary[0]);
}); 

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("salary*2", function () {
    pm.expect(req_salary*2).to.eql(+resp_salary[1]);
}); 

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("salary*3", function () {
    pm.expect(req_salary*3).to.eql(+resp_salary[2]);
}); 

15. Создать в окружении переменную name +
16. Создать в окружении переменную age +
17. Создать в окружении переменную salary +

18. Передать в окружение переменную name
pm.environment.set("name", "sasha");

19. Передать в окружение переменную age
pm.environment.set("age", "19");

20. Передать в окружение переменную salary
pm.environment.set("salary", "600");

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
resp_salary.forEach((item) => {console.log(item)});

========================================

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request +
2. Вставить параметр age из окружения в age +
3. Вставить параметр name из окружения в name +
4. Отправить запрос. +

5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

6. Спарсить response body в json.
let resp_f = pm.response.json();

7. Спарсить request.
let req_f = request.data

8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Check start_qa_salary", function () {
    pm.expect(resp_f).to.have.property("start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Check qa_salary_after_6_months", function () {
    pm.expect(resp_f).to.have.property("qa_salary_after_6_months");
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Check qa_salary_after_12_months", function () {
    pm.expect(resp_f).to.have.property("qa_salary_after_12_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Check qa_salary_after_1.5_year", function () {
    pm.expect(resp_f).to.have.property("qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Check qa_salary_after_3.5_years", function () {
    pm.expect(resp_f).to.have.property("qa_salary_after_3.5_years");
});

13. Проверить, что json response имеет параметр person
pm.test("Check person", function () {
    pm.expect(resp_f).to.have.property("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Check response start_qa_salary", function () {
    pm.expect(req_salary).to.eql(start_qa_salary);
}); 

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Check response qa_salary_after_6_months", function () {
    pm.expect(req_salary*2).to.eql(qa_salary_after_6_months);
}); 

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Check response qa_salary_after_12_months", function () {
    pm.expect(req_salary*2.7).to.eql(qa_salary_after_12_months);
}); 

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("check qa_salary_after_1.5_year", function () {
    pm.expect(req_salary*3.3).to.eql(resp_f["qa_salary_after_1.5_year"]);
}); 

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("check qa_salary_after_3.5_years", function () {
    pm.expect(req_salary*3.8).to.eql(resp_f["qa_salary_after_3.5_years"]);
}); 

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Check u_name", function () {
    pm.expect(req_salary).to.eql(resp_f.person.u_name[1]);
}); 

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Check u_age", function () {
    pm.expect(+req_f.age).to.eql(resp_f.person.u_age);
}); 

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Check u_salary_5_years ", function () {
    pm.expect(req_salary*4.2).to.eql(resp_f.person.u_salary_5_years);
});  

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let i in resp_f.person)
console.log("Property:", i, "Value:", resp_f.person[i]);



